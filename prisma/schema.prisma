// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id       String @id @default(cuid())
  name     String
  country  String
  currency String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users         User[]
  approvalRules ApprovalRule[]
  
  @@map("companies")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

model User {
  id        String @id @default(cuid())
  name      String
  email     String @unique
  password  String
  role      Role   @default(EMPLOYEE)
  companyId String
  managerId String?
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  company             Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager             User?   @relation("UserManager", fields: [managerId], references: [id])
  managees            User[]  @relation("UserManager")
  
  // Password reset tokens
  passwordResetTokens PasswordResetToken[]
  
  // Expense relations
  expenses            Expense[]
  approvals           Approval[] @relation("UserApprovals")
  specialApprovalRules ApprovalRule[] @relation("UserSpecialApproval")
  
  @@map("users")
}

model PasswordResetToken {
  id     String   @id @default(cuid())
  userId String
  token  String   @unique
  expiry DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExpenseCategory {
  TRAVEL
  FOOD
  ACCOMMODATION
  TRANSPORTATION
  OFFICE_SUPPLIES
  SOFTWARE
  MARKETING
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RuleType {
  PERCENTAGE
  SPECIFIC_APPROVER
  HYBRID
}

model Expense {
  id              String          @id @default(cuid())
  userId          String
  amount          Decimal         @db.Decimal(10, 2)
  currency        String          @default("USD")
  convertedAmount Decimal?        @db.Decimal(10, 2)
  category        ExpenseCategory @default(OTHER)
  vendor          String?
  description     String?
  date            DateTime        @default(now())
  status          ExpenseStatus   @default(PENDING)
  receiptUrl      String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals       Approval[]
  
  @@map("expenses")
  @@index([userId])
  @@index([status])
  @@index([date])
}

model Approval {
  id         String         @id @default(cuid())
  expenseId  String
  approverId String
  status     ApprovalStatus @default(PENDING)
  comments   String?
  stepOrder  Int            @default(1)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  
  // Relations
  expense    Expense        @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approver   User           @relation("UserApprovals", fields: [approverId], references: [id])
  
  @@map("approvals")
  @@unique([expenseId, stepOrder])
  @@index([approverId])
  @@index([status])
}

model ApprovalRule {
  id                  String   @id @default(cuid())
  companyId           String
  ruleType            RuleType
  threshold           Int?     // Percentage threshold (0-100)
  specialApproverId   String?  // Specific approver for certain conditions
  maxAmount           Decimal? @db.Decimal(10, 2) // Maximum amount for auto-approval
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  specialApprover     User?    @relation("UserSpecialApproval", fields: [specialApproverId], references: [id])
  
  @@map("approval_rules")
  @@index([companyId])
}
